<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekCoder</title>
  
  <subtitle>极客码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.igeekcoder.com/"/>
  <updated>2020-05-22T03:21:17.267Z</updated>
  <id>http://www.igeekcoder.com/</id>
  
  <author>
    <name>EthanXQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitFlow工作流</title>
    <link href="http://www.igeekcoder.com/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>http://www.igeekcoder.com/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/</id>
    <published>2020-05-20T06:50:51.000Z</published>
    <updated>2020-05-22T03:21:17.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发工作中优秀的编码固然重要，高效的使用工具、规范开发流程也是个人及团队协作中至关重要的一点，每个公司或者团队可能都会有自己的Git工作流程各有取舍，各有优缺点。本篇文章想和大家分享一些自己关于Git工作流程（PS:不是Git的使用教程）上的一些想法，探讨能否基于GitFlow落实到工作中。</p><h3 id="1-什么是GitFlow"><a href="#1-什么是GitFlow" class="headerlink" title="1.什么是GitFlow?"></a>1.什么是GitFlow?</h3><blockquote><p>Git Flow 是由 Vincent Driessen（文森特·德里森） 在 2010年提出的一套基于Git的工作流程<code>标准</code>，定义了一个项目发布的分支<code>模型</code>，为管理具有预定发布周期的大型项目提供了一个健壮的框架，解决当分支过多时 , 如何有效快速管理这些分支.</p><p><a href="https://jeffkreeftmeijer.com/git-flow/" target="_blank" rel="noopener">https://jeffkreeftmeijer.com/git-flow/</a></p></blockquote><h4 id="1-1-GitFlow分支"><a href="#1-1-GitFlow分支" class="headerlink" title="1-1.GitFlow分支"></a>1-1.GitFlow分支</h4><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/e850352ac65c10384ddd401e94faf115b27e89b8.png" alt="e850352ac65c10384ddd401e94faf115b27e89b8"></p><h5 id="核心分支："><a href="#核心分支：" class="headerlink" title="核心分支："></a>核心分支：</h5><p><strong><code>master</code> ：</strong></p><ul><li>一个项目有且只能有一个master分支</li><li>存放的是随时可供在生产环境中部署的稳定版本代码</li><li>每次更新master，都需对master添加指定格式的tag，用于发布或回滚</li><li>这个分支只能从其它分支（release 或 hotfix）合并，不能在这个分支上直接修改</li></ul><p><strong><code>develop</code>：</strong></p><ul><li>一个项目有且只能有一个develop分支、派生自master分支</li><li>是保存当前最新开发成果的分支</li><li>包含所有要发布到下一个Release的代码</li></ul><h5 id="临时分支："><a href="#临时分支：" class="headerlink" title="临时分支："></a>临时分支：</h5><p><strong><code>feature</code>:</strong></p><ul><li>命名规则<code>feature/*</code></li><li>以功能为单位派生自develop分支</li><li>feature分支只与develop分支交互，开发完成后合并到develop分支</li></ul><p><strong><code>release</code>：</strong></p><ul><li>命名规则<code>release/*</code> </li><li>用来为发布新版的测试、修复做准备，派生自develop</li><li>测试环境bug直接在此分支删修复，并合并回develop分支</li><li>release分支测试通过后，合并到master分支并且给master打上新的版本tag</li></ul><p><strong><code>hotfix</code>：</strong></p><ul><li>命名规则<code>hotfix/*</code></li><li>主要用于线上修复，派生自master</li><li>完成bugv修复，必须合并回master分支和develop分支</li></ul><h4 id="1-2-Gitflow工具"><a href="#1-2-Gitflow工具" class="headerlink" title="1-2.Gitflow工具"></a>1-2.Gitflow工具</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><strong>mac osx</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-flow</span><br></pre></td></tr></table></figure><ul><li><strong>windows</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化仓库创建master分支和develop分支，并自动切到develop分支</span></span><br><span class="line">git flow init</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个feature/V1.0的功能分支</span></span><br><span class="line">git flow feature start V1.0  </span><br><span class="line"></span><br><span class="line"><span class="comment">#把feature/V1.0分支推送到远程仓库</span></span><br><span class="line">git flow feature publish V1.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#把feature/V1.0合并到develop,并自动删除feature分支，切回develop分支</span></span><br><span class="line">git flow feature finish V1.0  </span><br><span class="line"></span><br><span class="line"><span class="comment">#从develop 创建release/1.0分支</span></span><br><span class="line">git flow release start 1.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#把release/1.0 合并到master并给这次发布打tag,合并回develop删除release/1.0</span></span><br><span class="line">git flow release finish 1.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#基于master创建hotfix/bug1的修复分支</span></span><br><span class="line">git flow hotfix start bug1  </span><br><span class="line"></span><br><span class="line"><span class="comment">#结束一个hotfix分支，和release一样，同时合并回develop和master</span></span><br><span class="line">git flow hotfix finish bug1</span><br></pre></td></tr></table></figure><blockquote><p>Gitflow 是一个框架一个模型，习惯用Git 原生命令的可以继续用git命令实现以上操作</p></blockquote><h4 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1-3.应用"></a>1-3.应用</h4><p>上面说过Gitflow它是一个模型一个大致框架我们不必严格遵循，尽管有人吐槽它很复杂，我也尝试绕过它想看看有没有更好更简单流程，思来想去对比还是觉得GitFlow比较符合最佳实践，那结合我们的实际工作情况我们该如何落地Gitflow呢 ?   </p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200522092359083.png" alt="image-20200522092359083"></p><p>一般项目都会有<code>开发</code>、 <code>测试</code>、 <code>预生产</code>、 <code>生产</code> 四套环境，开发环境一般用于前后端或者服务间的联调稳定性要求不高，根据Gitflow规范</p><ul><li>以功能或以一个版本跌代为一个feature分支（版本周期小的敏捷开发建议以小版本为一个feature分支），由develop直接checkout或从develop commit记录checkout 用于新需求开发、联调自测，可部署到开发环境</li><li>develop严格控制merge权限，在feature分支开发完确定在下个迭代周期发布的才能MR (Merge Request)合并到develop分支，此MR可用作后期codereview</li><li>release 相对稳定派生自 develop分支，禁止从其他分支pull, 用于提测及测试环境bug修复，修复完的bug需要合并到develop分支</li><li>master 稳定分支，release分支合并过来需要打新版本tag 可用于预生产、生产环境部署</li><li>hotfix 修复预生产或生产环境bug修复完成需合并到master及develop</li></ul><blockquote><p><strong>优点：</strong></p><p>1.每个阶段我们只用关注一个分支，开发阶段只用关心feature分支，测试阶段只用关心release分支</p><p>2.分支作用域划分明确，单独release版本提测可以排除其他分支干扰（PS:我们目前是所有要提测不同版本功能都会合并到test分支，避免不了相互干扰的情况）</p><p><strong>缺点：</strong></p><p>1.有一定的学习成本需要团队成员对分支的理解一致</p></blockquote><h3 id="3-代码提交规范"><a href="#3-代码提交规范" class="headerlink" title="3.代码提交规范"></a>3.代码提交规范</h3><blockquote><p>有了统一Git分支管理规范，我们也需要统一代码格式统一提交规范，减少不必要的冲突以及更直观的查看代码提交记录</p></blockquote><h4 id="3-1-统一代码格式化"><a href="#3-1-统一代码格式化" class="headerlink" title="3-1.统一代码格式化"></a>3-1.统一代码格式化</h4><p>1.阿里编程规约 ，可以根据阿里巴巴开发手册扫描我们代码中的规范性（插件名称：Alibaba Java Coding Guideliens）</p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200521231713896.png" alt="image-20200521231713896"></p><p>2.插件 Eclipse Code Formatter </p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200521233358321.png" alt="image-20200521233358321"></p><p>Ctrl + Alt + L （mac : Command + Option + L） 可对代码进行快速格式化下图是格式化成功的提示</p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200521234109670.png" alt="image-20200521234109670"></p><h4 id="3-2-统一Commit格式"><a href="#3-2-统一Commit格式" class="headerlink" title="3-2.统一Commit格式"></a>3-2.统一Commit格式</h4><p>插件 Git Commit Template </p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200522000922509.png" alt="image-20200522000922509"></p><p><strong>type: commit 的类型（必填）</strong></p><ul><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li></ul><p><strong>scope</strong>: commit 影响的范围（选填）, 比如: user, component, utils, build…</p><p><strong>short description</strong>: 提交简述（必填）</p><p><strong>long description</strong>: 详细简述（选填）</p><p><strong>breaking changes &amp; close issues</strong>: 通常是 BREAKING CHANGE 或修复的 bug 的链接（选填）</p><p>效果：</p><p><img src="/2020/05/20/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20200521234704632.png" alt="image-20200521234704632"></p><blockquote><p>ChangeLog</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;开发工作中优秀的编码固然重要，高效的使用工具、规范开发流程也是个人及团队协作中至关重要的一点，每个公司或者团队可能都会有自己的Git工作流程
      
    
    </summary>
    
    
    
      <category term="-Git" scheme="http://www.igeekcoder.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-模板方法</title>
    <link href="http://www.igeekcoder.com/2020/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    <id>http://www.igeekcoder.com/2020/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-16T10:15:01.000Z</published>
    <updated>2020-05-16T10:22:29.643Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="设计模式" scheme="http://www.igeekcoder.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Hexo搭建自己的个人博客</title>
    <link href="http://www.igeekcoder.com/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.igeekcoder.com/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-16T08:26:24.000Z</published>
    <updated>2020-05-16T10:07:20.359Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200516163743725.png" alt="image-20200516163743725" style="zoom:150%;"><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><blockquote><ol><li>注册一个GitHub账号  </li><li>安装git、node.js（自行安装很简单 直接下一步到底）</li><li>条件允许的话可以申请一个个人的域名 （非必须）</li></ol></blockquote><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>创建一个名为<code>你的用户名.github.io</code>的仓库，比如我的github用户名为 <code>igeekcoder</code>,即创建一个名称为<code>igeekcoder.github.io</code> 的仓库（其他名称默认无效）， 如下图其它内容可以不用填写勾选，点击Create repository 即可创建。</p><p>ps: 由于我已经创建过了它会提示我仓库已存在</p><p><img src="/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200516173407937.png" alt="image-20200516173407937"></p><h2 id="3-配置SSH-Key"><a href="#3-配置SSH-Key" class="headerlink" title="3.配置SSH Key"></a>3.配置SSH Key</h2><h4 id="3-1-检查本机是否已经有SSH-Key。"><a href="#3-1-检查本机是否已经有SSH-Key。" class="headerlink" title="3-1.检查本机是否已经有SSH Key。"></a>3-1.检查本机是否已经有SSH Key。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cd &#x2F;.ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><img src="/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200516174437602.png" alt="image-20200516174437602" style="zoom:150%;"><p>如果提示：<code>No such file or directory</code> 说明你是第一次使用git。</p><h4 id="3-2-生成你的SSH-Key"><a href="#3-2-生成你的SSH-Key" class="headerlink" title="3-2.生成你的SSH Key"></a>3-2.生成你的SSH Key</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C "你的邮箱地址"</span><br></pre></td></tr></table></figure><p>使用以上命令直接回车，不用填写东西。之后会让你输入密码（可以不输入密码，直接为空，这样更新代码不用每次输入 id_rsa 密码了）。然后就生成一个目录.ssh ，里面有两个文件：id_rsa , id_rsa.pub（id_rsa中保存的是私钥，id_rsa.pub中保存的是公钥）</p><h4 id="3-3-添加SSH-Key到GitHub"><a href="#3-3-添加SSH-Key到GitHub" class="headerlink" title="3-3.添加SSH Key到GitHub"></a>3-3.添加SSH Key到GitHub</h4><p>将公钥id_rsa.pub的内容复制到 Settings &gt;&gt; SSH And GPG keys &gt;&gt; new 新创建一个SSH Key</p><p><img src="/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200516175723532.png" alt="image-20200516175723532"></p><p>使用一下命令测试是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><img src="/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200516180041606.png" alt="image-20200516180041606" style="zoom:150%;"><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://www.igeekcoder.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>First_Blog</title>
    <link href="http://www.igeekcoder.com/2020/05/01/First_Blog/"/>
    <id>http://www.igeekcoder.com/2020/05/01/First_Blog/</id>
    <published>2020-05-01T08:02:41.000Z</published>
    <updated>2020-05-01T08:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新的开始决定以博客的形式记录分享学习的笔记，内容以java为主，技术栈包含<code>spring 全家桶</code>、<code>Java基础</code>、<code>mysql</code>、<code>dubbo</code>、<code>zookeeper</code>、<code>kafka</code>、<code>netty</code>、<code>ELK</code>、<code>nosql</code> 等等分布式或微服务场景常用的技术   let’s do it！</p></blockquote><p><img src="/2020/05/01/First_Blog/timg-1588761416214-1588762807786.jpg" alt="timg-1588761416214-1588762807786"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;新的开始决定以博客的形式记录分享学习的笔记，内容以java为主，技术栈包含&lt;code&gt;spring 全家桶&lt;/code&gt;、&lt;code&gt;Java基础&lt;/code&gt;、&lt;code&gt;mysql&lt;/code&gt;、&lt;code&gt;dubbo&lt;/code&gt;、&lt;code
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
